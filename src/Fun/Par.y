-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Fun.Par
  ( happyError
  , myLexer
  , pProgram
  , pMain
  , pDef
  , pListDef
  , pListIdent
  , pExpr3
  , pExpr2
  , pExpr
  , pExpr1
  ) where

import Prelude

import qualified Fun.Abs
import Fun.Lex

}

%name pProgram Program
%name pMain Main
%name pDef Def
%name pListDef ListDef
%name pListIdent ListIdent
%name pExpr3 Expr3
%name pExpr2 Expr2
%name pExpr Expr
%name pExpr1 Expr1
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('     { PT _ (TS _ 1) }
  ')'     { PT _ (TS _ 2) }
  '->'    { PT _ (TS _ 3) }
  ';'     { PT _ (TS _ 4) }
  '='     { PT _ (TS _ 5) }
  '\\'    { PT _ (TS _ 6) }
  'main'  { PT _ (TS _ 7) }
  'print' { PT _ (TS _ 8) }
  L_Ident { PT _ (TV $$)  }

%%

Ident :: { Fun.Abs.Ident }
Ident  : L_Ident { Fun.Abs.Ident $1 }

Program :: { Fun.Abs.Program }
Program : ListDef Main { Fun.Abs.Prog $1 $2 }

Main :: { Fun.Abs.Main }
Main : 'main' '=' 'print' Expr3 ';' { Fun.Abs.DMain $4 }

Def :: { Fun.Abs.Def }
Def : Ident ListIdent '=' Expr { Fun.Abs.DDef $1 $2 $4 }

ListDef :: { [Fun.Abs.Def] }
ListDef : {- empty -} { [] } | Def ';' ListDef { (:) $1 $3 }

ListIdent :: { [Fun.Abs.Ident] }
ListIdent : {- empty -} { [] } | Ident ListIdent { (:) $1 $2 }

Expr3 :: { Fun.Abs.Expr }
Expr3 : Ident { Fun.Abs.Var $1 } | '(' Expr ')' { $2 }

Expr2 :: { Fun.Abs.Expr }
Expr2 : Expr2 Expr3 { Fun.Abs.App $1 $2 } | Expr3 { $1 }

Expr :: { Fun.Abs.Expr }
Expr : '\\' Ident '->' Expr { Fun.Abs.Lambda $2 $4 } | Expr1 { $1 }

Expr1 :: { Fun.Abs.Expr }
Expr1 : Expr2 { $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

