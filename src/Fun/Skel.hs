-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Fun.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Fun.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Fun.Abs.Ident -> Result
transIdent x = case x of
  Fun.Abs.Ident string -> failure x

transProgram :: Fun.Abs.Program -> Result
transProgram x = case x of
  Fun.Abs.Prog defs main -> failure x

transMain :: Fun.Abs.Main -> Result
transMain x = case x of
  Fun.Abs.DMain expr -> failure x

transDef :: Fun.Abs.Def -> Result
transDef x = case x of
  Fun.Abs.DDef ident idents expr -> failure x

transExpr :: Fun.Abs.Expr -> Result
transExpr x = case x of
  Fun.Abs.Var ident -> failure x
  Fun.Abs.App expr1 expr2 -> failure x
  Fun.Abs.Lambda ident expr -> failure x
